#!/bin/bash


Green="\033[32m"
Red="\033[31m"
yellow='\e[38;1;33m'
Green_background="\033[42;37m"
Reeed_background="\033[41;37m"
Suffix="\033[0m"
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
NC='\033[0m'
biru="\033[34;1m";merah="\033[31;1m";hitam="\033[32;1m"
putih="\033[39;1m";cyan="\033[35;1m";ungu="\033[36;1m"
kuning="\033[33;1m";n="\033[00m"
Green="\033[32m"
Red="\033[31m"
yellow='\e[38;1;33m'
Green_background="\033[42;37m"
Red_background="\033[41;37m"
Suffix="\033[0m"

tyblue='\e[1;36m'
NC='\e[0m'
b="\033[34;1m";m="\033[31;1m";h="\033[32;1m"
p="\033[39;1m";c="\033[35;1m";u="\033[36;1m"
k="\033[33;1m";n="\033[00m"

function print_header() {
Green="\033[32m"
NC="\033[0m"
    echo -e "${Green}==============================${NC}"
    echo -e "${Green}    Yaddy Kakkoii Decryptor   ${NC}"
    echo -e "${Green}==============================${NC}"
}

function yaddykakkoii() {
echo ""
echo -e  "${tyblue}┌──────────────────────────────────────────┐${NC}"
echo -e  "${tyblue}│              \033[1;37mTERIMA KASIH                ${tyblue}│${NC}"
echo -e  "${tyblue}│         \033[1;37mSUDAH MENGGUNAKAN SCRIPT         ${tyblue}│${NC}"
echo -e  "${tyblue}│        \033[1;37mDARI YADDY KAKKOII GANTENG        ${tyblue}│${NC}"
echo -e  "${tyblue}└──────────────────────────────────────────┘${NC}"
echo ""
}

function triadzz(){
clear
figlet -f small -t "      Yaddy Kakkoii" | lolcat
echo -e "              TELEGRAM : t.me/Crystalllz | Crypter"
echo -e "              ⚡MAGELANG ⚡PHREAKER ⚡| versi beta"
echo ""
echo "*****************************************************"
echo "*            Not Open Source @Crystalllz            *"
echo "*****************************************************"
echo "*                DECRYPT SHELL SCRIPT               *"
echo "*                      Author                       *"
echo "*                Mas Triadzz Ganteng                *"
echo "* Telegram: t.me/Crystalllz | Github: Yaddy Kakkoii *"
echo "*                       1337                        *"
echo "*****************************************************"
echo ""
}
print_header
triadzz

# ============================================================
YDX="https://raw.githubusercontent.com/YaddyKakkoii/stb/main/"
IDX="https://raw.githubusercontent.com/njajaldoang/1dra/main/"
# ============================================================
function makedirectory(){
    mkdir -p $HOME/.var
    mkdir -p $HOME/.var/local
    mkdir -p $HOME/.var/local/sbin
    mkdir -p $HOME/.var/local/backup
}
function checkdirectory(){
if [ -d $HOME/.var ]; then rm -rf $HOME/.var; fi
if [ ! -d $HOME/.var ]; then makedirectory; fi
}
# ============================================================
if [ ! -f $HOME/.var/local/sbin/spiner ]; then
    checkdirectory
    wget -qO $HOME/.var/local/sbin/spiner "${YDX}spiner.sh"
    if ! wget -qO "$HOME/.var/local/sbin/spiner" "${YDX}spiner.sh"; then
        echo -e "${Red}Error: Failed to download spiner.sh${Suffix}"
        exit 1
    fi
    chmod 777 $HOME/.var/local/sbin/spiner
else
    rm -rf $HOME/.var/local/sbin/spiner
    wget -qO $HOME/.var/local/sbin/spiner "${YDX}spiner.sh"
    if ! wget -qO "$HOME/.var/local/sbin/spiner" "${YDX}spiner.sh"; then
        echo -e "${Red}Error: Failed to download spiner.sh${Suffix}"
        exit 1
    fi
    chmod 777 $HOME/.var/local/sbin/spiner
fi




source $HOME/.var/local/sbin/spiner


FOLDER_HOME="$HOME"
FOLDER_input="${FOLDER_HOME}/input"
FOLDER_output="${FOLDER_HOME}/output"

[ -d ${FOLDER_output} ] && rm -rf ${FOLDER_output}

if [ ! -d ${FOLDER_output} ]; then
    mkdir -p ${FOLDER_output}
fi

# rename file supaya berekstensi .sh

  for zFILE in ${FOLDER_input}/*
  do
    if [[ "$zFILE" != *.sh ]]; then
        mv -v "$zFILE" ${zFILE}.sh
    fi
  done

echo "print working directory saat ini"
pwd
echo ""

#cek ada file di folder input gak


if [ -z "$(find "$FOLDER_input" -maxdepth 1 -type f)" ]; then
	echo "Warning: $FOLDER_input/file.sh not found."
	exit 1
fi

ls $FOLDER_input
cd $FOLDER_input

echo "print working directory saat ini"
pwd
echo ""



pattern=false
ulimit -s unlimited >/dev/null 2>&1
echo ""
print_header
printf "${NC} ➤➤➤ 3Yaddy SHC DECRYPTOR versi 10.0 \n"
shuf=$(shuf -i 1-100 -n 1)

dessc() {
target=$(basename "$(pwd)/$shuf.temp1.sh")
echo -e "→ ${target} \n SSC DECRYPTOR🔥🔥🔥"
		for sec in $(seq 1 19); do
			exec="$(pwd)/$shuf.temp1.sh"
			"$exec" >/dev/null 2>&1 &
			child=$!
			sleep 0.0"$sec"
			kill -STOP $child
			fd=$(cat /proc/$child/fd/3)
			echo "$fd" >"$(pwd)/$shuf.temp3.sh"
			if grep -q '#!/' "$(pwd)/$shuf.temp3.sh"; then
				counter=$((counter + 1))
				echo "$counter. SSC" >>"$(pwd)/decrypt.log"
				break
			else
				rm "$(pwd)/$shuf.temp3.sh"
				touch "$(pwd)/$shuf.temp3.sh"
			fi
		done
mv -v "$(pwd)/$shuf.temp3.sh" "$(pwd)/$shuf.temp1.sh"
echo ""
}

deshc() {
target=$(basename "$(pwd)/$shuf.temp1.sh")
echo -e "→ ${target} \n SHC DECRYPTOR🔥🔥"
	for sec in $(seq 1 19); do
		exec="$(pwd)/$shuf.temp1.sh"
		"$exec" >/dev/null 2>&1 &
		child=$!
		sleep 0.0"$sec"
		kill -STOP $child
		cmdline=$(cat /proc/$child/cmdline)
		echo "$cmdline" | sed 's/.*\(#!\)/\1/' | head -c "-$(echo "$exec" | wc -c)" >"$(pwd)/$shuf.temp2.sh"
		kill -TERM $child
		if grep -q '#!/' "$(pwd)/$shuf.temp2.sh"; then
			counter=$((counter + 1))
			echo "$counter. SHC" >>"$(pwd)/decrypt.log"
			break
		else
			rm "$(pwd)/$shuf.temp2.sh"
			touch "$(pwd)/$shuf.temp2.sh"
			dessc
		fi
	done
mv -v "$(pwd)/$shuf.temp2.sh" "$(pwd)/$shuf.temp1.sh"
echo ""
}

dec() {
target=$(basename "$(pwd)/$shuf.temp1.sh")
echo -e "→ ${target} \n CHECK DECOMPRESS GPG BZIP2 GZIP BROTLI XZ LZMA"
echo -e "\n CHECK DEOBFUSCATE EVAL BASHROCK BASE64 "
while true; do
	input_file="$(pwd)/$shuf.temp1.sh"
	base=$(basename "$input_file")
	filename="${base%.*}"
	if grep -q 'gpg' "$(pwd)/$shuf.temp1.sh"; then
		counter=$((counter + 1))
		echo "$counter. Gnupg GPG" >> "$(pwd)/decrypt.log"
		if [[ ! -e $(which gpg) ]]; then
			apt install gnupg -y
		fi
		echo -e "\n${ORANGE} ⌛ Dec $counter gpg $filename → $filename.temp2.sh ${biru} 1st\n"
		line_number=0
		text="$(pwd)/$shuf.temp1.sh"
		while IFS= read -r line; do
			((line_number++))
			if [[ "$line" == *"skip="* ]]; then
				skip=$(echo $line | cut -d= -f2)
				echo "skip ketemu di baris ke $line_number ✓✓"
			fi
            #passphrase=$(sed -n '62p' "$input_file" | grep -oP '(?<=passphrase ")[^"]*')
			if [[ "$line" == *"passphrase"* ]]; then
				line_number_found="$line_number"
				passphrase=$(sed -n "$line_number_found p" "$input_file" | grep -oP '(?<=passphrase ")[^"]*')
				if tail -n +$skip "$input_file" | gpg -q --decrypt --batch --passphrase "$passphrase" > "$(pwd)/$shuf.temp2.sh"; then
					chmod 700 "$(pwd)/$shuf.temp2.sh"
					echo "skip = $skip ✓✓"
					echo "passphrase ketemu di baris ke $line_number ✓✓"
					mv "$(pwd)/$shuf.temp2.sh" "$(pwd)/$shuf.temp1.sh"
					echo -e ""
					echo -e "${Green_background}[Sukses]: $filename Decrypted with Gnupg gpg ☕ ✓✓ ${Suffix}\n\n${biru}"
					echo -e ""
				fi
			fi
		done < "$text"
		echo -e "\n ${cyan} $counter. Decrypt Gpg Sukses ✓ ☕ ${NC}\n"
		break
	elif grep -q 'bzip2' "$(pwd)/$shuf.temp1.sh"; then
		counter=$((counter + 1))
		echo -e "\n${biru} $(pwd)/$shuf.temp1.sh $counter bukan gpg, try bzip2 "
		echo -e "\n${ORANGE} ⌛ Decrypt $counter bzip2 $filename → $filename.temp2.sh ${biru} 2nd\n"
		echo "$counter. bzip2" >> "$(pwd)/decrypt.log"
		if [[ ! -e $(which bzip2) ]]; then apt install bzip2 -y; fi
            line_number=0
            text="$(pwd)/$shuf.temp1.sh"
            while IFS= read -r line; do
                ((line_number++))
                if [[ "$line" == *"skip="* ]]; then
                    skip=$(echo $line | cut -d= -f2)
                    if tail -n +$skip "$(pwd)/$shuf.temp1.sh" | bzip2 -cd > "$(pwd)/$shuf.temp2.sh"; then
                        chmod 700 "$(pwd)/$shuf.temp2.sh"
                        echo "skip ketemu di baris ke $line_number ✓✓"
                        echo "skip = $skip ✓✓"
                        mv "$(pwd)/$shuf.temp2.sh" "$(pwd)/$shuf.temp1.sh"
                        echo -e ""
                        echo -e "${Green_background}[Sukses]: $filename Decrypted with bzip2 ☕ ✓✓ ${Suffix}\n\n${biru}"
                        echo -e ""
                    fi
                fi
            done < "$text"
		echo -e "\n ${cyan} $counter. Decrypt bzip2 Sukses ✓ ☕ ${NC} \n"
		break
	elif grep -q 'gzip' "$(pwd)/$shuf.temp1.sh"; then
		counter=$((counter + 1))
		echo -e "\n${biru} $(pwd)/$shuf.temp1.sh $counter bukan gpg, try gzip "
		echo -e "\n${ORANGE} ⌛ Decrypt $counter gzip $filename → $filename.temp2.sh ${biru} 2nd\n"
		echo "$counter. gzip" >> "$(pwd)/decrypt.log"
		if [[ ! -e $(which gzip) ]]; then apt install gzip -y; fi
            line_number=0
            text="$(pwd)/$shuf.temp1.sh"
            while IFS= read -r line; do
                ((line_number++))
                if [[ "$line" == *"skip="* ]]; then
                    skip=$(echo $line | cut -d= -f2)
                    if tail -n +$skip "$(pwd)/$shuf.temp1.sh" | gzip -cd > "$(pwd)/$shuf.temp2.sh"; then
                        chmod 700 "$(pwd)/$shuf.temp2.sh"
                        echo "skip ketemu di baris ke $line_number ✓✓"
                        echo "skip = $skip ✓✓"
                        mv "$(pwd)/$shuf.temp2.sh" "$(pwd)/$shuf.temp1.sh"
                        echo -e ""
                        echo -e "${Green_background}[Sukses]: $filename Decrypted with gzip ☕ ✓✓ ${Suffix}\n\n${biru}"
                        echo -e ""
                    fi
                fi
            done < "$text"
		echo -e "\n ${cyan} $counter. Decrypt gzip Sukses ✓ ☕ ${NC} \n"
		break
	elif grep -q 'eval \"$x\"' "$(pwd)/$shuf.temp1.sh"; then
		counter=$((counter + 1))
		echo -e "\n${biru} $(pwd)/$shuf.temp1.sh $counter bukan anu, try Bashrock "
		echo -e "\n${ORANGE} ⌛ Decrypt $counter Bashrock $filename → $filename.temp2.sh ${biru} 7th \n"
		echo "$counter. Bashrock " >>"$(pwd)/decrypt.log"
            #cat "$(pwd)/$shuf.temp1.sh" | tr ';' '\n' | grep 'RzE=' | cut -d '"' -f2 | tr ' ' '\n' | rev | base64 -d >> "$(pwd)/$shuf.temp2.sh"
            #cp "$(pwd)/$shuf.temp2.sh" "$(pwd)/$shuf.temp1.sh"
            #rm "$(pwd)/$shuf.temp2.sh"
		sed 's/eval "$x";/echo "$x";/g' "$(pwd)/$shuf.temp1.sh" >"$(pwd)/$shuf.temp2.sh"
		bash "$(pwd)/$shuf.temp2.sh" >"$(pwd)/$shuf.temp1.sh"
		rm "$(pwd)/$shuf.temp2.sh"
		echo -e "\n ${cyan} $counter. Decrypt Bashrock Sukses ✓ ☕ ${NC}\n"
	elif grep -q 'eval ' "$(pwd)/$shuf.temp1.sh"; then
		counter=$((counter + 1))
		echo -e "\n${biru} $(pwd)/$shuf.temp1.sh $counter bukan Bashrock , try Eval "
		echo -e "\n${ORANGE} ⌛ Decrypt $counter Eval $filename → $filename.temp2.sh ${biru} 8th \n"
            echo "$counter. Eval" >>"$(pwd)/decrypt.log"
            #sed -r -i 's/eval/echo/g' "$(pwd)/$shuf.temp1.sh"
            #sed -i '/echo/ s/$/ > hasileval.sh/' "$(pwd)/$shuf.temp1.sh"
            #bash "$(pwd)/$shuf.temp1.sh"
            #mv "$(pwd)/hasileval.sh" "$(pwd)/$shuf.temp1.sh"
		sed 's/eval "\$/echo "\$/g; s/\[ "$(id -u)" -ne 2000 \]/! true/' "$(pwd)/$shuf.temp1.sh" >"$(pwd)/$shuf.temp2.sh"
		bash "$(pwd)/$shuf.temp2.sh" >"$(pwd)/$shuf.temp1.sh"
		rm "$(pwd)/$shuf.temp2.sh"
		echo -e "\n ${cyan} $counter. Decrypt Eval Sukses ✓ ☕ ${NC}\n"
	elif grep -q 'base64 -d | sh$' "$(pwd)/$shuf.temp1.sh"; then
		counter=$((counter + 1))
		echo -e "\n${biru} $(pwd)/$shuf.temp1.sh $counter bukan Eval, try Base64 "
		echo -e "\n${ORANGE} ⌛ Decrypt $counter Base64 $filename → $filename.temp2.sh ${biru} 9th \n"
		echo "$counter. Base64" >>"$(pwd)/decrypt.log"
		sed 's/base64 -d | sh/base64 -d/; s/\[ "$(id -u)" -ne 2000 \]/! true/' "$(pwd)/$shuf.temp1.sh" >"$(pwd)/$shuf.temp2.sh"
		bash "$(pwd)/$shuf.temp2.sh" >"$(pwd)/$shuf.temp1.sh"
		rm "$(pwd)/$shuf.temp2.sh"
		echo -e "\n ${cyan} $counter. Decrypt Base64 Sukses ✓ ☕ ${NC}\n"
	elif grep -q '| base64 -d' "$(pwd)/$shuf.temp1.sh"; then
		counter=$((counter + 1))
		echo -e "\n${biru} $(pwd)/$shuf.temp1.sh $counter bukan Base64, try Baseval "
		echo -e "\n${ORANGE} ⌛ Decrypt $counter Baseval $filename → $filename.temp2.sh ${biru} 10th \n"
		echo "$counter. base64eval" >>"$(pwd)/decrypt.log"
		sed 's/eval "\$/echo "\$/g; s/\[ "$(id -u)" -ne 2000 \]/! true/' "$(pwd)/$shuf.temp1.sh" >"$(pwd)/$shuf.temp2.sh"
		bash "$(pwd)/$shuf.temp2.sh" >"$(pwd)/$shuf.temp1.sh"
		rm "$(pwd)/$shuf.temp2.sh"
		echo -e "\n ${cyan} $counter. Decrypt Baseval Sukses ✓ ☕ ${NC}\n"
	elif grep -q '" | sh' "$(pwd)/$shuf.temp1.sh"; then
		counter=$((counter + 1))
		echo -e "\n${biru} $(pwd)/$shuf.temp1.sh $counter bukan Baseval, try Other method "
		echo -e "\n${ORANGE} ⌛ Decrypt $counter Other $filename → $filename.temp2.sh ${biru} 11th \n"
		echo "$counter. Other" >>"$(pwd)/decrypt.log"
		sed 's/\" | sh/\" > \"\$(pwd)\/$shuf.temp1.sh\"/g; s/\[ "$(id -u)" -ne 2000 \]/! true/" "$(pwd)/$shuf.temp1.sh' >"$(pwd)/$shuf.temp2.sh"
		bash "$(pwd)/$shuf.temp2.sh"
		rm "$(pwd)/$shuf.temp2.sh"
		echo -e "\n ${cyan} $counter. Decrypt Other Sukses ✓ ☕ ${NC}\n"
	elif grep -q '^#[[:print:]]\{50,\}' "$(pwd)/$shuf.temp1.sh"; then
		counter=$((counter + 1))
		echo -e "\n${biru} $(pwd)/$shuf.temp1.sh $counter bukan Othetr, try Pattern "
		echo -e "\n${ORANGE} ⌛ Decrypt $counter Pattern $filename → $filename.temp2.sh ${biru} 12th \n"
		echo "$counter. Pattern" >>"$(pwd)/decrypt.log"
		cp "$(pwd)/$shuf.temp1.sh" "$(pwd)/$shuf.temp2.sh"
		cat "$(pwd)/$shuf.temp2.sh" | grep -v '^#[[:print:]]\{50,\}' >"$(pwd)/$shuf.temp1.sh"
		rm "$(pwd)/$shuf.temp2.sh"
		pattern=true
	else
		break
	fi
done
}

# PART 1

find "$FOLDER_input" -maxdepth 1 -type f | while IFS= read -r file
	do
		counter=0
		touch "$(pwd)/decrypt.log"
		cp -v "$file" "$(pwd)/$shuf.temp1.sh"
		chmod +x "$(pwd)/$shuf.temp1.sh"
		echo ""
		echo -e "[+] Decrypting $(basename "$file") ☕"
		echo ""
		file "$(pwd)/$shuf.temp1.sh"
		echo ""
		if [[ $(file "$(pwd)/$shuf.temp1.sh") != *ELF* ]]; then
			echo ""
			echo "bukan ELF gunakan dec unshell biasa"
			dec
		else
			echo "ELF detected, mungkin SHC gunakan deshc..tryy"
			deshc
		fi
		cat "$(pwd)/decrypt.log"
		rm "$(pwd)/decrypt.log"
		if [ -s "$(pwd)/$shuf.temp1.sh" ]; then
			mv -v "$(pwd)/$shuf.temp1.sh" "$file"
			echo -e "→Success Dec ✓: \nDecryption of $(basename "$file") completed."
			mv -v "$file" $FOLDER_output
		else
			echo -e "${Reeed_background}[Failed]: Unable to decrypt $(basename "$file"). !! ${Suffix}\n\n${putih}"
			rm "$(pwd)/$shuf.temp1.sh"
		fi
	done
	

# PART 2

find "$FOLDER_output" -maxdepth 1 -type f | while IFS= read -r file
	do
		counter=0
		touch "$(pwd)/decrypt.log"
		cp -v "$file" "$(pwd)/$shuf.temp1.sh"
		chmod +x "$(pwd)/$shuf.temp1.sh"
		echo ""
		echo -e "[+] Decrypting $(basename "$file") ☕"
		echo ""
		file "$(pwd)/$shuf.temp1.sh"
		echo ""
		if [[ $(file "$(pwd)/$shuf.temp1.sh") != *ELF* ]]; then
			echo ""
			echo "bukan ELF gunakan dec unshell biasa"
			dec
		else
			echo "ELF detected, mungkin SSC gunakan deshc..tryy"
			dessc
		fi
		cat "$(pwd)/decrypt.log"
		rm "$(pwd)/decrypt.log"
		if [ -s "$(pwd)/$shuf.temp1.sh" ]; then
			mv -v "$(pwd)/$shuf.temp1.sh" "$file"
			echo -e "→Success Dec ✓: \nDecryption of $(basename "$file") completed."
			mv -v "$file" $FOLDER_output
		else
			echo -e "${Reeed_background}[Failed]: Unable to decrypt $(basename "$file"). !! ${Suffix}\n\n${putih}"
			rm "$(pwd)/$shuf.temp1.sh"
		fi
	
	done


	
	
echo ""
if [ "$pattern" = true ]; then
	echo " Warning: Decryption pattern mode used."
	echo "Some code comments may be lost."
	echo ""
fi
cd
yaddykakkoii

